// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: task.queries.sql

package repository

import (
	"context"
	"database/sql"
)

const completeTask = `-- name: CompleteTask :exec
update tasks
set status       = 'COMPLETED',
    completed_at = now()
where pid = ?
`

func (q *Queries) CompleteTask(ctx context.Context, pid string) error {
	_, err := q.exec(ctx, q.completeTaskStmt, completeTask, pid)
	return err
}

const createTask = `-- name: CreateTask :execresult
insert into tasks (pid, status, summary, technician_id)
values (?, ?, ?, ?)
`

type CreateTaskParams struct {
	Pid          string `json:"pid"`
	Status       string `json:"status"`
	Summary      string `json:"summary"`
	TechnicianID int32  `json:"technician_id"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (sql.Result, error) {
	return q.exec(ctx, q.createTaskStmt, createTask,
		arg.Pid,
		arg.Status,
		arg.Summary,
		arg.TechnicianID,
	)
}

const deleteTask = `-- name: DeleteTask :exec
DELETE
FROM tasks
WHERE pid = ?
`

func (q *Queries) DeleteTask(ctx context.Context, pid string) error {
	_, err := q.exec(ctx, q.deleteTaskStmt, deleteTask, pid)
	return err
}

const getAllTasks = `-- name: GetAllTasks :many
select id, pid, created_at, technician_id, summary, status, completed_at
from tasks
order by id desc
`

func (q *Queries) GetAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.query(ctx, q.getAllTasksStmt, getAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Pid,
			&i.CreatedAt,
			&i.TechnicianID,
			&i.Summary,
			&i.Status,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskWithPid = `-- name: GetTaskWithPid :one
select id, pid, created_at, technician_id, summary, status, completed_at
from tasks
where pid = ?
order by id desc
`

func (q *Queries) GetTaskWithPid(ctx context.Context, pid string) (Task, error) {
	row := q.queryRow(ctx, q.getTaskWithPidStmt, getTaskWithPid, pid)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Pid,
		&i.CreatedAt,
		&i.TechnicianID,
		&i.Summary,
		&i.Status,
		&i.CompletedAt,
	)
	return i, err
}

const getTaskWithTechId = `-- name: GetTaskWithTechId :many
select id, pid, created_at, technician_id, summary, status, completed_at
from tasks
where technician_id = ?
order by id desc
`

func (q *Queries) GetTaskWithTechId(ctx context.Context, technicianID int32) ([]Task, error) {
	rows, err := q.query(ctx, q.getTaskWithTechIdStmt, getTaskWithTechId, technicianID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Pid,
			&i.CreatedAt,
			&i.TechnicianID,
			&i.Summary,
			&i.Status,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
