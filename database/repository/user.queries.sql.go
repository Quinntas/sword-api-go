// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.queries.sql

package repository

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
insert into users (pid, username, password, role)
values (?, ?, ?, ?)
`

type CreateUserParams struct {
	Pid      string `json:"pid"`
	Username string `json:"username"`
	Password string `json:"password"`
	Role     string `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.exec(ctx, q.createUserStmt, createUser,
		arg.Pid,
		arg.Username,
		arg.Password,
		arg.Role,
	)
}

const getAllUsers = `-- name: GetAllUsers :many
select id, pid, created_at, username, password, role
from users
order by id desc
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.getAllUsersStmt, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Pid,
			&i.CreatedAt,
			&i.Username,
			&i.Password,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserWithPid = `-- name: GetUserWithPid :one
select id, pid, created_at, username, password, role
from users
where pid = ?
order by id desc
`

func (q *Queries) GetUserWithPid(ctx context.Context, pid string) (User, error) {
	row := q.queryRow(ctx, q.getUserWithPidStmt, getUserWithPid, pid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Pid,
		&i.CreatedAt,
		&i.Username,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const getUserWithUsername = `-- name: GetUserWithUsername :one
select id, pid, created_at, username, password, role
from users
where username = ?
order by id desc
`

func (q *Queries) GetUserWithUsername(ctx context.Context, username string) (User, error) {
	row := q.queryRow(ctx, q.getUserWithUsernameStmt, getUserWithUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Pid,
		&i.CreatedAt,
		&i.Username,
		&i.Password,
		&i.Role,
	)
	return i, err
}
